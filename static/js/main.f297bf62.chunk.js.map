{"version":3,"sources":["App.js","index.js"],"names":["App","Date","toISOString","slice","dateEl","useRef","nameEl","amountEl","incomeEl","incomePerEl","useState","expenses","setExpenses","amount","amountEssential","amountNonessential","total","setTotal","keys","setKeys","frequency","income","setIncome","classifyExpense","key","classification","index","filter","expense","className","ref","type","onClick","date","current","value","name","parseInt","add_expense","id","$","css","show","map","confirm","console","log","defaultValue","htmlFor","selected","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f297bf62.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport $ from 'jquery'\n\n// TODO: spending per week\n// TODO: money for spending\n// TODO: money saved\n\nfunction App() {\n\n  var d = new Date()\n  const date = d.toISOString().slice(0, 10)\n\n  const dateEl = useRef(null)\n  const nameEl = useRef(null)\n  const amountEl = useRef(null)\n  const incomeEl = useRef(null)\n  const incomePerEl = useRef(null)\n\n  const [expenses, setExpenses] = useState([])\n  const [total, setTotal] = useState({\n    amount: 0,\n    amountEssential: 0,\n    amountNonessential: 0\n  })\n  const [keys, setKeys] = useState(0)\n  const [income, setIncome] = useState({\n    amount: 0,\n    frequency: \"bi-weekly\"\n  })\n\n  const add_expense = () => {\n\n    const date = dateEl.current.value\n    const name = nameEl.current.value\n    const amount = parseInt(amountEl.current.value)\n\n    if (date !== '' & name !== '' & amount !== '') {\n      setExpenses(\n        [...expenses,\n          {\n            key: keys + 1,\n            date: date,\n            name: name,\n            amount: amount\n          }\n        ]\n      )\n      setKeys(keys+1)\n    }\n\n    setTotal({\n      ...total,\n      amount: total.amount + amount\n    })\n  }\n\n  const classifyExpense = (key, classification) => {\n    const index = key -1\n    const amount = expenses[index]['amount']\n\n    // If the classification changes\n    if (expenses[index]['classification'] !== classification) {\n      // if already classified, subtract amount from other classification total\n      if (expenses[index]['classification']) {\n        // if classification was essentials, subtract from essentials, else subtract from nonessentials\n        expenses[index]['classification'] === 'essentials' ?\n        setTotal({\n          ...total,\n          amountEssential: total.amountEssential - amount,\n          amountNonessential: total.amountNonessential + amount\n        })\n        :\n        setTotal({\n          ...total,\n          amountNonessential: total.amountNonessential - amount,\n          amountEssential: total.amountEssential + amount\n        })\n      } else {\n        // classification not already defined, just add amount to total\n        classification === 'essentials' ?\n        setTotal({\n          ...total,\n          amountEssential: total.amountEssential + amount,\n        })\n        :\n        setTotal({\n          ...total,\n          amountNonessential: total.amountNonessential + amount  \n        })\n      }\n\n      expenses[index]['classification'] = classification\n      setExpenses(expenses.filter(expense => {\n        return expense.classification ? \n        {\n          ...expense,\n          classification: classification\n        }\n        :\n        expense\n      }))\n    }\n  }\n\n  const viewExpenses = () => {\n    $(\".stats-view\").css(\"display\",\"none\")\n    $(\".expenses-list\").show()\n  }\n\n  const viewStats = () => {\n    $(\".expenses-list\").css(\"display\",\"none\")\n    $(\".stats-view\").show()\n  }\n\n  const deleteExpense = (key) => {\n    // get confirmation \n    // eslint-disable-next-line no-restricted-globals\n    if (!confirm( \"Are you sure you want to delete expense \" + expenses[key-1]['name'] + \"?\")) {\n      return\n    }\n\n    // update keys of all items from key removed, of filtered expenses without removed item\n    setExpenses(expenses.filter(expense => {\n        if (expense.key === key) {\n          console.log(\"total amount before: \", total.amount)\n          console.log(\"total amount after: \", total.amount - expense.amount)\n          // update classification total if was classified\n          if (expense.classification) {\n            expense.classification === 'essentials' ?\n            setTotal({\n              ...total,\n              amount: total.amount - expense.amount, // update total\n              amountEssential: total.amountEssential - expense.amount,\n            })\n            :\n            setTotal({\n              ...total,\n              amount: total.amount - expense.amount, // update total\n              amountNonessential: total.amountNonessential - expense.amount  \n            })\n          }\n        }\n        return expense.key !== key\n      }).map(expense => {\n      console.log(\"mapping at key: \",)\n      if (expense.key > key) {\n        return {\n          key: expense.key - 1,\n          date: expense.date,\n          name: expense.name,\n          amount: expense.amount\n        }\n      }\n      return expense\n    }))\n    // update keys count\n    setKeys(key-1)\n  }\n\n  const updateIncome = () => {\n    setIncome({\n      amount: incomeEl.current.value,\n      frequency: incomePerEl.current.value\n    })\n  }\n\n  return <div className=\"page\">\n\n    <div className=\"input-area\">\n      <div className=\"inputs\">\n        Date: <input ref={dateEl} type=\"date\" className=\"date-input input\"/>\n        Expense Name: <input ref={nameEl} type=\"text\" className=\"expense-name-input input\"/>\n        Amount: <input ref={amountEl} type=\"text\" className=\"amount-input input\"/>\n      </div>\n      <button className=\"add-button\" onClick={() => add_expense()}>Add</button>\n    </div>\n\n\n    <div className=\"select-view\">\n      <div className=\"view-selection full-expenses\">\n        <button id=\"expenses-view-btn\" onClick={() => viewExpenses()} className=\"view-btn\">Full Expenses</button>\n      </div>\n      <div className=\"view-selection\">\n        <button id=\"stats-view-btn\" onClick={() => viewStats()} className=\"view-btn\">Stats</button>\n      </div>\n    </div>\n\n    <div className=\"expenses-list\">\n      <div className=\"expenses-section\">\n        {\n        expenses.map(expense => {\n          return <div key={expense.key} className=\"expense\">\n            <h3>{expense.name}</h3>\n            <h4>{expense.amount}</h4>\n            <h5>{expense.date}</h5>\n            <button className={expense.classification === 'essentials' ? 'btn btn-pressed' : 'btn btn-nonpressed'} onClick={() => classifyExpense(expense.key, 'essentials')}>Essential</button>\n            <button className={expense.classification === 'non-essentials' ? 'btn btn-pressed' : 'btn btn-nonpressed'} onClick={() => classifyExpense(expense.key, 'non-essentials')}>Non-Essential</button>\n            <button className=\"delete\" onClick={() => deleteExpense(expense.key)}>Delete</button>\n          </div>\n        })\n        }\n      </div>\n    </div>\n\n    <div className=\"stats-view\">\n      \n      <div className=\"income\">\n      <div className=\"income-section\">\n          <div className=\"income-section-group\">\n            Income: $ <input ref={incomeEl} defaultValue={income.amount} id='salary' type=\"number\"/>\n          </div>\n          <div className=\"income-section-group\">\n          <label htmlFor=\"incomePer\"> Per: </label>\n            <select ref={incomePerEl} name=\"incomePer\" id=\"incomePer\" className=\"incomePer\">\n              <option value=\"day\">Day</option>\n              <option value=\"week\">Week</option>\n              <option selected value=\"bi-weekly\">Bi-Weekly</option>\n              <option value=\"month\">Month</option>\n              <option value=\"year\">Year</option>\n            </select>\n          </div>\n        </div>\n        <button className=\"update-income-btn\" onClick={() => updateIncome()}>Update Income</button>\n      </div>\n      \n\n      {/* <label htmlFor=\"statsPer\">Stats For Past: </label>\n      <select name=\"statsPer\" id=\"statsPer\">\n        <option value=\"day\">Day</option>\n        <option value=\"week\">Week</option>\n        <option value=\"month\" selected>Month</option>\n        <option value=\"year\">Year</option>\n      </select> */}\n\n      <div className=\"stats-section\">\n        $ Spent: {total.amount}\n      </div>\n      <div className=\"stats-section\">\n        <h2>$ SAVED: {income.amount - total.amount}</h2>\n      </div>\n\n    </div>\n\n  </div>\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}